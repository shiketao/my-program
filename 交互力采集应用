#include <iostream>
#include <Windows.h>
#include <string>
#include <thread>
#include <iomanip>
#include <vector>
#include <fstream>
#include <sstream>
#include <time.h>
#include <stdlib.h>
#include <math.h>

using namespace std;

HANDLE 初始化串口(char *szStr)
{

	WCHAR wszClassName[5];
	memset(wszClassName, 0, sizeof(wszClassName));
	MultiByteToWideChar(CP_ACP, 0, szStr, strlen(szStr) + 1, wszClassName,
		sizeof(wszClassName) / sizeof(wszClassName[0]));
	HANDLE hCom1 = CreateFile(wszClassName,//COM口
		GENERIC_READ | GENERIC_WRITE,	//允许读和写
		0, //独占方式
		NULL,
		OPEN_EXISTING, //打开而不是创建
		0, //同步方式
		NULL);

	if (hCom1 == INVALID_HANDLE_VALUE)
	{
		printf("打开COM失败!\n");
	}
	else
	{
		printf("COM打开成功！\n");
	}

	SetupComm(hCom1, 16, 16); //输入缓冲区和输出缓冲区的大小都是1024
	COMMTIMEOUTS TimeOuts;

	//设定读超时
	TimeOuts.ReadIntervalTimeout = 100;
	TimeOuts.ReadTotalTimeoutMultiplier = 5000;
	TimeOuts.ReadTotalTimeoutConstant = 5000;
	//设定写超时
	TimeOuts.WriteTotalTimeoutMultiplier = 500;
	TimeOuts.WriteTotalTimeoutConstant = 2000;
	SetCommTimeouts(hCom1, &TimeOuts); //设置超时
	DCB dcb;
	GetCommState(hCom1, &dcb);
	dcb.BaudRate = 115200; //波特率为9600
	dcb.ByteSize = 8; //每个字节有8位
	dcb.Parity = NOPARITY; //无奇偶校验位
	dcb.StopBits = ONESTOPBIT; //1个停止位
	SetCommState(hCom1, &dcb);
	return hCom1;
}

int main()
{
	HANDLE hCom1 = 初始化串口("COM2");
	DWORD readsize;
	int shuju[1] = { 0 };//每次接收一个字节
	int count = 0;	//数据包字节个数
	int flag0 = 0;	//接收每个字节的标志位
	int y = 0;		//计数
	int k = 100;
	float rec[9] = { 0 };
	float yali1[3] = { 0 };
	float yali2[3] = { 0 };
	float A1 = 2.2;
	float A2 = 1.7;
	float angle = 0;
	float a = 5;


	while (1)
	{
		ReadFile(hCom1,	//读入shuju的文件指针,这个指针指向的文件必须是GENERIC_READ 访问属性的文件
			shuju,		//接收shuju的缓冲区
			1,			//指定要读取的字节数
			&readsize,	//指向一个DWORD类型变量的指针，用来接收读取的字节数
			NULL);

		if (readsize > 0)
		{
			if (flag0 == 0 && shuju[0] == 0xAA)
			{
				flag0 = 1;
			}

			else if (flag0 == 1 && shuju[0] == 0x55)
			{
				flag0 = 2;
			}

			else if (flag0 == 2)
			{
				rec[count] = shuju[0];
				count++;

				if (count == 6)
				{
					yali1[3] = ((long)(rec[5] + rec[4] * 256 + rec[3] * 256 * 256)) * (1.7881E-07);//后
					yali2[3] = ((long)(rec[2] + rec[1] * 256 + rec[0] * 256 * 256)) * (1.7881E-07);//前

					count = 0;
					flag0 = 0;

					yali1[2] = (yali1[2] + yali1[1] + yali1[0]) / 3;//均值滤波
					yali2[2] = (yali2[2] + yali2[1] + yali2[0]) / 3;

					if (yali1[2] > A1 && yali2[2] < A2)//后有压力
					{
						angle = a * (yali1[2] - A1) + k * (yali1[2] - yali1[0]);
					}

					if (yali1[2] < A1 && yali2[2] > A2)//前有压力
					{
						angle = -(a * (yali2[2] - A2) + k * (yali2[2] - yali2[0]));
					}
					
					if (yali1[2] > A1 && yali2[2] > A2)//前后都有压力
					{
						angle = k * ((yali1[2] - A1) - (yali2[2] - A2));
					}

					for (y = 0; y < 3; y++)
					{
						yali1[y] = yali1[y + 1];
						yali2[y] = yali2[y + 1];
					}

					printf("%f     %f    %f\n", yali1[2], yali2[2], angle);

					angle = 0;
					//ofstream outFile;
					//outFile.open("444.csv", ios::app);	// 打开模式可省略
					//outFile << yali1[14] << "," << yali2[14] <<  endl;	//导入表格
					//outFile.close();
				}
			}
		}

		else
		{
			flag0 = 0;
		}
	}
}
