#include <iostream>
#include <Windows.h>
#include <string>
#include <thread>
#include <iomanip>
#include <vector>
#include <fstream>
#include <sstream>
#include <time.h>
#include <stdlib.h>
#include <math.h>

using namespace std;

HANDLE 初始化串口(char *szStr)
{

	WCHAR wszClassName[5];
	memset(wszClassName, 0, sizeof(wszClassName));
	MultiByteToWideChar(CP_ACP, 0, szStr, strlen(szStr) + 1, wszClassName,
		sizeof(wszClassName) / sizeof(wszClassName[0]));
	HANDLE hCom1 = CreateFile(wszClassName,//COM口
		GENERIC_READ | GENERIC_WRITE,	//允许读和写
		0, //独占方式
		NULL,
		OPEN_EXISTING, //打开而不是创建
		0, //同步方式
		NULL);

	if (hCom1 == INVALID_HANDLE_VALUE)
	{
		printf("打开COM失败!\n");
	}
	else
	{
		printf("COM打开成功！\n");
	}

	SetupComm(hCom1, 16, 16); //输入缓冲区和输出缓冲区的大小都是1024
	COMMTIMEOUTS TimeOuts;

	//设定读超时
	TimeOuts.ReadIntervalTimeout = 100;
	TimeOuts.ReadTotalTimeoutMultiplier = 5000;
	TimeOuts.ReadTotalTimeoutConstant = 5000;
	//设定写超时
	TimeOuts.WriteTotalTimeoutMultiplier = 500;
	TimeOuts.WriteTotalTimeoutConstant = 2000;
	SetCommTimeouts(hCom1, &TimeOuts); //设置超时
	DCB dcb;
	GetCommState(hCom1, &dcb);
	dcb.BaudRate = 115200; //波特率为9600
	dcb.ByteSize = 8; //每个字节有8位
	dcb.Parity = NOPARITY; //无奇偶校验位
	dcb.StopBits = ONESTOPBIT; //1个停止位
	SetCommState(hCom1, &dcb);
	return hCom1;
}


int main()
{
	HANDLE hCom1 = 初始化串口("COM3");
	DWORD readsize;
	int shuju[1] = { 0 };//每次接收一个字节
	int count = 0;	//数据包字节个数
	int flag0 = 0;	//接收每个字节的标志位
	int flag1 = 0;	//0为第一次判断支撑转摆动、1为否
	int state = 1;	//支撑相
	int y = 0;		//计数
	int k = 0;		//判断斜率时，数据个数是否满足
	int z = 0;		//计数
	float rec[9] = { 0 };
	float yali1[10] = { 0 };
	float yali2[10] = { 0 };
	float yali3[10] = { 0 };
	float A1 = 0;			//三个基准值
	float A2 = 0;
	float A3 = 0;

	while (1)
	{
		ReadFile(hCom1,	//读入shuju的文件指针,这个指针指向的文件必须是GENERIC_READ 访问属性的文件
			shuju,		//接收shuju的缓冲区
			1,			//指定要读取的字节数
			&readsize,	//指向一个DWORD类型变量的指针，用来接收读取的字节数
			NULL);

		if (readsize > 0)
		{
			if (flag0 == 0 && shuju[0] == 0xAA)
			{
				flag0 = 1;
			}

			else if (flag0 == 1 && shuju[0] == 0x55)
			{
				flag0 = 2;
			}

			else if (flag0 == 2)
			{
				rec[count] = shuju[0];
				count++;

				if (count == 9)
				{
					yali1[9] = ((long)(rec[8] + rec[7] * 256 + rec[6] * 256 * 256)) * (1.7881E-07);//右足中
					yali2[9] = ((long)(rec[5] + rec[4] * 256 + rec[3] * 256 * 256)) * (1.7881E-07);//右足前
					yali3[9] = ((long)(rec[2] + rec[1] * 256 + rec[0] * 256 * 256)) * (1.7881E-07);//右足后
					count = 0;
					flag0 = 0;

					if (k >= 11)
					{
						yali1[9] = (yali1[9] + yali1[8] + yali1[7]) / 3;
						yali2[9] = (yali2[9] + yali2[8] + yali2[7]) / 3;
						yali3[9] = (yali3[9] + yali3[8] + yali3[7]) / 3;

						if (flag1 == 0)
						{
							if (((yali1[9] - yali1[0]) < -0.02) && 
								((yali2[9] - yali2[0]) < -0.01) || 
								((yali3[9] - yali3[0]) < -0.02) && 
								((yali1[9] - yali1[6]) < -0.02) && 
								((yali2[9] - yali2[6]) < -0.01) || 
								((yali3[9] - yali3[6]) < -0.02))
							{
								state = 0;//进入摆动项
								flag1 = 1;
							}
						}

						if (flag1 == 1)//已经有基准值
						{
							if (state == 0)//此时为摆动相
							{
								if (z == 10)
								{
									A1 = (yali1[9] + yali1[8] + yali1[7] + yali1[6] + yali1[5]) / 5;//足中基准值
									A2 = (yali2[9] + yali2[8] + yali2[7] + yali2[6] + yali2[5]) / 5;//足前基准值
									A3 = (yali3[9] + yali3[8] + yali3[7] + yali3[6] + yali3[5]) / 5;//足后基准值
								}

								if (z >= 10)
								{
									if ((yali1[9] > A1 + 0.03) || (yali2[9] > A2 + 0.03) || (yali3[9] > A3 + 0.03))//检测足前足中足后转为支撑相
									{
										state = 1;//支撑相
										z = 0;
									}
								}

								if (z < 12)
								{
									z++;
								}
							}

							else if (state == 1)//此时为支撑相
							{
								if ((yali1[9] < A1 + 0.02) && (yali2[9] < A2 + 0.02) && (yali3[9] < A3 + 0.02))//检测足前足中足后转为摆动相
								{
									state = 0; //摆动相
								}
							}
						}
					}

					else
					{
						k++;
					}

					for (y = 0; y < 9; y++)
					{
						yali1[y] = yali1[y + 1];
						yali2[y] = yali2[y + 1];
						yali3[y] = yali3[y + 1];
					}

					printf("%f     %f     %f     %f     %f     %f     %d\n", yali1[9], yali2[9], yali3[9], A1, A2, A3, state);

					ofstream outFile;
					outFile.open("444444444444.csv", ios::app);	// 打开模式可省略
					outFile << yali1[9] << "," << yali2[9] << "," << yali3[9] << "," << A1 << "," << A2 << "," << A3 << "," << state + 2 << endl;//导入表格
					outFile.close();
				}
			}
		}
	}
}
